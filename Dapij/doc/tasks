# This file contains a list of task specifications. A person that wishes to undertake
# a particular task can notify other people by putting his id at the beginning of the
# same line where the task specification begins.

DEVELOPERS:

Marcin Szymczak <mpszymczak@gmail.com>
id: MS

Nikolay Pulev <N.Pulev@sms.ed.ac.uk>
id: NP

NOTATION GUIDE:

	[#]. Section
		#.#[prio] Subsection
			- comment
			* task

Priorities:
r - urgent important features
y - could be delayed, by needed eventually 
g - not urgent, secondary features

Completeness:
X	- not yet implemented
~	- in development
~V	- working, but needs improvement (functionality/performance)
V	- implemented

TASKS:

	[0]. Issues
MS		~	0.1 Problem with missing static classes at runtime in porduction (issue 002-NoClassDefFoundError).

	[1]. Architecture
NP			1.1	Implement a agent server that streams *events to a network port
			V	* The server is created in a daemon thread that is started in the agent's premain method.
			V	* The premain method will block & wait for an initial client connection (so that
					the user program doesn't start until a client is ready to receive the messages).
			V	* The user thread will invoke server method calls that directly send the messages to
					the clients (relying on the OS network buffers) using send()**.
			V	* Add a ShutdownHook (a thread object) to Runtime that flushes the queues (perhaps
					by just calling close() on the connection) to guarantee that all messages are
					 delivered to the connected client.
			V	** Implement send function properly (to guarantee ordered messages).

NP		V	1.2	[r] Establish a protocol (network message format) for the events

		X	1.3 [g] Implement a production test client (perhaps based on the testing client).

			1.4	[g] Implement a consumer API (e.g. using the Visitor pattern)
				* A client that accepts events from the agent event server (an event reader).
				* Event visitors for processing different events.

			*events - object creation, thread accesses to objects (method invocation, field access)

	[2]. Testing
NP			2.1. [r] Fix testing framework
			V	* Provide support for loading & instrumenting policies per package.
			V	* Add functionality to override instrumentation policy regardless of class pkg policy.
					- should be loaded from config file
			V	* Review TestClassLoader implementation and verify that it works
					- improve package load policies
			
			2.2	[r] Test communication architecture & protocol
			~V	- test agent production server
				- test production client
MS			~V	* Performance test - fast send of a huge amount of messages.
NP			~V 	* Test message order (no concurrent tests yet)
			X	* Test protocol methods & classes

MS/NP	~V	2.3 [r] Fully test instrumentation code.

NP		~V	2.4 [r] Fully test event generation code.

			2.5 [r]	Fully test agent code.
			X	* ArgStack
MS			~V	* InstIdentifier (not yet tested for concurrency & thread safety).
NP			~V	* Settings (not yet tested for concurrency & thread safety).

	[3]. Agent features
MS		~V	3.1	[r] Implement object identification (either in map or in inserted field)
MS			3.2	Research the approach of adding a field to java.lang.Object
				- this is better as it is centralised, but might introduce other problems
			3.3	[g] Cover the rest of the (currently not handled) cases for object creation
				which include (but may not be limited to):
				- create instances using reflection
				- create instances using deserialisation
				- deal with unknown instances (i.e. without known origin)

	[4]. [y] Settings Singleton
		~V	4.1 [y] make it thread safe, e.g.:
				- use a concurrent HashMap
				- use synchronised setters?

	[5]. Documentation.
			5.1 [y] Documenting issues
			~V	* TODOs
			~V	* Extensive comments in code
				* Textual explanations in doc folder / Contemplate wiki.

	[6]. [g] Proper logging?
