/*
 * TODO: enter meaningful info
 */
package dapij;

import java.util.ArrayList;

import org.objectweb.asm.ClassVisitor;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;

/**
 *
 * @author Nikolay Pulev <N.Pulev@sms.ed.ac.uk>
 */
public class StatsCollector extends ClassVisitor {
    
    private String sourceFile;

    public StatsCollector(ClassVisitor cv) {
        super(Opcodes.ASM4, cv);
    }
    
    @Override
    public void visit(int version, int access, String name, String signature,
            String superName, String[] interfaces) {
        
        /*
         * Change version of loaded java class to 1.5 if less than 1.4.
         * Needed because the loading of class constants in the constant pool
         * (as "mv.visitLdcInsn(currentElem.type)" does in
         * InstanceCreationVisitor::visitMethodInsn()) is not supported by
         * some older Java versions. Becase the version of the classes being
         * instrumented is unknown, this may sometimes cause validation errors.
         * 
         * Cause of validation error suggested by:
         * http://mail-archive.ow2.org/asm/2009-06/msg00011.html
         * 
         * Ezample outputs (with and without the validation error) of the
         * command "mvn -e test &> <output*>", the generated bytecode and a
         * diff file are available in ${basedir}/doc/class-constants-issue
         * directory.
         * 
         * TODO: This fix might be the case of additional (unforeseen) errors.
         */
        ArrayList<Integer> javaVersions = new ArrayList<Integer>();
        javaVersions.add(Integer.valueOf(Opcodes.V1_1));
        javaVersions.add(Integer.valueOf(Opcodes.V1_2));
        javaVersions.add(Integer.valueOf(Opcodes.V1_3));
        javaVersions.add(Integer.valueOf(Opcodes.V1_4));
        
        if (javaVersions.contains(version)) {
            version = Opcodes.V1_5;
        }
        
        cv.visit(version, access, name, signature, superName, interfaces);
    }
    
    @Override
    public void visitSource(String source, String debug) {
        sourceFile = source;    /* Obtain name of source file */
        cv.visitSource(source, debug);
    }
    
    @Override
    public MethodVisitor visitMethod(int access, String name, String desc,
            String signature, String[] exceptions) {

        MethodVisitor mv = cv.visitMethod(access, name, desc, signature,
                exceptions);
        
        /* Insert bytecode to track created objectects */
        if (mv != null) {
            mv = new InstanceCreationVisitor(mv, name, sourceFile);
        }
        
        return mv;
    }
}
